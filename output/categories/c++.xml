<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Portfolio (Posts about c++)</title><link>https://sharmagautam.com/</link><description></description><atom:link href="https://sharmagautam.com/categories/c%2B%2B.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:gautamsharma2813@gmail.com"&gt;Gautam Sharma&lt;/a&gt; </copyright><lastBuildDate>Sun, 13 Jun 2021 19:07:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Initializer Lists</title><link>https://sharmagautam.com/posts/initializer-lists/</link><dc:creator>Gautam Sharma</dc:creator><description>&lt;div class="section" id="uniform-initialization"&gt;
&lt;h2&gt;Uniform Initialization&lt;/h2&gt;
&lt;div class="section" id="before-c-17"&gt;
&lt;h3&gt;Before C++17&lt;/h3&gt;
&lt;p&gt;Broadly speaking there are two main types of initialization in C++&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_1cf67fec5b36499f84b419b30c919371-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_1cf67fec5b36499f84b419b30c919371-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;     &lt;span class="c1"&gt;// direct initialization&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_1cf67fec5b36499f84b419b30c919371-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_1cf67fec5b36499f84b419b30c919371-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  &lt;span class="c1"&gt;// copy initialization&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;The main difference between the two is the that &lt;code class="docutils literal"&gt;direct initialization&lt;/code&gt; directly constructs the object &lt;code class="docutils literal"&gt;{1}&lt;/code&gt; and assigns it to &lt;code class="docutils literal"&gt;height&lt;/code&gt; whereas
copy initialization first constructs the object &lt;code class="docutils literal"&gt;{1}&lt;/code&gt; (think an extra default constructor call) and then assigns it to &lt;code class="docutils literal"&gt;height&lt;/code&gt;. Let me give you a solid
example.&lt;/p&gt;
&lt;p&gt;Another important thing to note is that copy initialization is more strict in terms of implict conversions than direct initialization. It does not allow any
implicit conversion.&lt;/p&gt;
&lt;p&gt;The STL data structures like &lt;code class="docutils literal"&gt;vector&lt;/code&gt; also make use of direct initialization as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_3f5c3f11044d4706afc67896513cfd16-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_3f5c3f11044d4706afc67896513cfd16-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// allowed&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;It is able to do it since it has a constructor that takes in arguments of type &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="important"&gt;
&lt;h4&gt;Important&lt;/h4&gt;
&lt;p&gt;The constructor of type &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/code&gt; always gets precedence. Eg:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-3"&gt;&lt;/a&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;_b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){};&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-4"&gt;&lt;/a&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;initializer_list&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;){};&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-6"&gt;&lt;/a&gt; &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-7"&gt;&lt;/a&gt;     &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;_a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-8"&gt;&lt;/a&gt;     &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;_b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-10"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_410ab2030d8d41aa9ba88ac600d2c898-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_410ab2030d8d41aa9ba88ac600d2c898-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// calls constructor with  std::initializer_list&amp;lt;double&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Now you may ask that what's the difference between &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::vector&amp;lt;double&amp;gt;&lt;/span&gt; height{5}&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::vector&amp;lt;double&amp;gt;&lt;/span&gt; height(5)&lt;/code&gt;.
As discussed above calling &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::vector&amp;lt;double&amp;gt;&lt;/span&gt; height{5}&lt;/code&gt; will implicitly call the constructor with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::initializer_list&amp;lt;double&amp;gt;&lt;/span&gt;&lt;/code&gt;
and make a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::vector&amp;lt;double&amp;gt;&lt;/span&gt;&lt;/code&gt; containing single element 5. On the other hand &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::vector&amp;lt;double&amp;gt;&lt;/span&gt; height(5)&lt;/code&gt; will construct a
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::vector&amp;lt;double&amp;gt;&lt;/span&gt;&lt;/code&gt; of size 5;&lt;/p&gt;
&lt;p&gt;Another thing to note is the above mentioned strictness of implicit conversion during brace initialization. According to C++ standard
&lt;a class="reference external" href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf"&gt;paragraph 8.5.4&lt;/a&gt; braze initialization does not allow narrowing conversion. A narrowing conversion is defined as&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-1"&gt;&lt;/a&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;4.99&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-2"&gt;&lt;/a&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.99&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt; &lt;span class="c1"&gt;// ok&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-3"&gt;&lt;/a&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.81&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_6bd6b51908ee47f98a4f3e96ed3be46a-4"&gt;&lt;/a&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;//error&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="after-c-17"&gt;
&lt;h3&gt;After C++ 17&lt;/h3&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C++17&lt;/span&gt;&lt;/code&gt; solves the above problem. In the new standard can use &lt;cite&gt;auto&lt;/cite&gt; to solve some of the problems.
For example:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_cdd6fcc939a2437fa924ca3dc18973a8-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cdd6fcc939a2437fa924ca3dc18973a8-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// int&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_cdd6fcc939a2437fa924ca3dc18973a8-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cdd6fcc939a2437fa924ca3dc18973a8-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// std::initializer_list&amp;lt;T&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://sharmagautam.com/posts/initializer-lists/#rest_code_cdd6fcc939a2437fa924ca3dc18973a8-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cdd6fcc939a2437fa924ca3dc18973a8-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// error - too many values to unpack&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;In &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C++11&lt;/span&gt;&lt;/code&gt; all of the above triggered &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;std::initializer_list&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For a more expansive overview visit &lt;a class="reference external" href="https://en.cppreference.com/w/cpp/utility/initializer_list"&gt;initializer_list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please feel free to add any comments, opinion etc. below.&lt;/p&gt;
&lt;p&gt;Signing out&lt;/p&gt;
&lt;p&gt;-Gautam&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>c++</category><guid>https://sharmagautam.com/posts/initializer-lists/</guid><pubDate>Wed, 24 Mar 2021 03:12:55 GMT</pubDate></item></channel></rss>